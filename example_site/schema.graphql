type User {
    id: ID!
    username: String!
    email: String!
    posts: [Post]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    user: User!
}

type Query {
    users: [User]!
    posts: [Post]!
}

enum Status {
    SUCCESSFUL
    FAILED
    AUTHERROR
}

type CreateUserPayload {
    status: Status!
    error: String
    user: User
}

type CreatePostPayload {
        status: Status!
        error: String
        post: Post
}

type LoginPayload {
    status: Status!
    error: String
    token: String
}

type Mutation {
    createUser(username: String!, email: String!, password: String!): CreateUserPayload
    createPost(title: String!, body: String!): CreatePostPayload
    sendMessage(message: String!): Boolean!

    login(username: String!, password: String!): LoginPayload
    logout: Boolean!
}

type Subscription {
    newPost: Post!
    count(limit: Int!): Int!
}